import tkinter as tk
from tkinter import filedialog, BooleanVar
import vk_api
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import asyncio
import os
import sys
import textwrap
import json

class VKtoTelegram:
    def __init__(self):
        self.vk_token = ""
        self.tg_token = ""
        self.tg_chat_id = ""
        self.vk_group_id = ""

    async def start(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.vk_token = self.vk_token_entry.get()
            # –≤—ã–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Å—Å—ã–ª–∫–∏
            self.vk_token = self.vk_token[self.vk_token.find("vk1.a."):self.vk_token.find("vk1.a.")+220]
            self.tg_token = self.tg_token_entry.get()
            self.tg_chat_id = self.tg_chat_id_entry.get()
            self.vk_group_id = self.vk_group_id_entry.get()
            if self.num_posts_entry.get() != "":
                need_posts_count = int(self.num_posts_entry.get())
            else:
                need_posts_count = None

            if self.vk_token != "" and self.tg_token != "" and self.tg_chat_id != "" and self.vk_group_id != "":
                self.root.withdraw()
            else:
                return

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
            settings = {
                'vk_token': self.vk_token,
                'tg_token': self.tg_token,
                'tg_chat_id': self.tg_chat_id,
                'vk_group_id': self.vk_group_id,
                'interval': self.time_interval_scale.get(),
                'num_posts': need_posts_count,
                'skip_first_post': self.skip_first_post_var.get()
            }
            with open('settings.json', 'w') as file:
                json.dump(settings, file)


            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
            bot = Bot(token=self.tg_token)
            dp = Dispatcher(bot)

            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ VK
            vk_session = vk_api.VkApi(token=self.vk_token)
            vk = vk_session.get_api()

            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
            all_posts = []

            # –û–±—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
            offset = 0

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç–µ–Ω–µ –≥—Ä—É–ø–ø—ã
            response = vk.wall.get(owner_id=f"-{self.vk_group_id}", count=0)
            post_count = response['count']
            print(f"–í —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤—Å–µ–≥–æ {post_count} –ø–æ—Å—Ç–æ–≤")
            print("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã...")
            while True:
                wall = vk.wall.get(owner_id=f"-{self.vk_group_id}", count=100, offset=offset)
                post_count = wall["count"]
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if need_posts_count != None:
                    if len(all_posts) >= need_posts_count:
                        print("–ü–æ—Å—Ç—ã —Å–æ–±—Ä–∞–Ω—ã")
                        break
                if not wall["items"]:
                    print("–ü–æ—Å—Ç—ã —Å–æ–±—Ä–∞–Ω—ã")
                    break

                all_posts.extend(wall["items"])
                offset += 100
                print(f"–®–∞–≥: {offset}")

            # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
            if self.skip_first_post_var.get() and len(all_posts) > 1:
                # —Å—Ä–µ–∑–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
                all_posts = all_posts[1:]

            # –¥–µ–ª–∞–µ–º —Å—Ä–µ–∑
            if need_posts_count != None:
                if len(all_posts) > need_posts_count:
                    all_posts = all_posts[:need_posts_count]


            print(f"–ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤ ({len(all_posts)})")
            counter = 1
            # –ü–æ—Å—Ç–∏–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –≤ Telegram, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
            for post in reversed(all_posts):

                # print(f"{post}\n\n\n") # –î–õ–Ø –û–¢–õ–ê–î–ö–ò
                try:
                    text = post["text"]
                    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–ø–æ—Å—Ç-–ª–∏ —ç—Ç–æ, –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                    if "copy_history" in post:
                        for attachments_search in post.get("copy_history", []):
                            if "attachments" in attachments_search:
                                attachments = attachments_search.get("attachments", [])

                        if len(post["copy_history"]) > 0:
                            if "text" in post["copy_history"][0]:
                                if post["copy_history"][0]["text"]:
                                    text += f'\n{post["copy_history"][0]["text"]}'
                    else:
                        attachments = post.get("attachments", [])
                    # print(attachments)
                    media = []
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
                    message = text

                    for attachment in attachments:
                        if attachment["type"] == "photo":
                            sizes = attachment["photo"]["sizes"]
                            photo_url = sizes[-1]["url"]
                            media.append(types.InputMediaPhoto(media=photo_url))

                        elif attachment["type"] == "video":
                            video_url = f'https://vk.com/video_ext.php?oid={attachment["video"]["owner_id"]}&id={attachment["video"]["id"]}&hash={post["hash"]}'
                            text += f'\nüì∫{video_url} {attachment["video"]["title"]}'
                            # –ü–æ–∏—Å–∫ –ø—Ä–µ–≤—å—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                            max_resolution = 0
                            for key in attachment["video"]:
                                if key.startswith('photo_'):
                                    resolution = int(key.split('_')[1])
                                    if resolution > max_resolution:
                                        max_resolution = resolution
                                        max_resolution_url = attachment["video"][f"photo_{resolution}"]
                            if max_resolution_url:
                                media.append(types.InputMediaPhoto(media=max_resolution_url))
                        elif attachment["type"] == "audio":
                            audio_name = f'\nüéµ {attachment["audio"]["artist"]} - {attachment["audio"]["title"]}'
                            text += f"{audio_name}"
                        # elif attachment
                        elif attachment["type"] == "link":
                            try:
                                index = 0
                                max_width = 0
                                for img in attachment["link"]["photo"]["sizes"]:
                                    if img["width"] > max_width:
                                        max_width = img["width"]
                                        photo_url = attachment["link"]["photo"]["sizes"][index]["url"]
                                    index += 1

                                media.append(types.InputMediaPhoto(media=photo_url))
                            except:
                                print("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
                            link_url = attachment["link"]["url"]
                            if link_url not in text:
                                text += f"\n{link_url}"

                    if not text and media == []:
                        print("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ø–æ—Å—Ç–µ...")
                        continue
                    first_msg = True
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π
                    message_parts = textwrap.wrap(text, width=1024, replace_whitespace=False)
                    # –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if message_parts == []:
                        await bot.send_media_group(chat_id=self.tg_chat_id, media=media)

                    for part in message_parts:
                        if first_msg == True and media != []:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                            media[0].caption = part
                            await bot.send_media_group(chat_id=self.tg_chat_id, media=media)
                            first_msg = False
                        else:
                            await bot.send_message(chat_id=self.tg_chat_id, text=part, parse_mode="HTML")
                        await asyncio.sleep(3)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    print(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {counter}/{len(all_posts)}")
                    counter+=1
                    await asyncio.sleep(self.time_interval_scale.get())
                except Exception as error:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç! {error}\n–ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        except Exception as error:
            print(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {error}")
        finally:
            self.root.deiconify()

    def load_settings(self):
        try:
            with open('settings.json', 'r') as file:
                settings = json.load(file)
                self.vk_token_entry.insert(0, settings['vk_token'])
                self.tg_token_entry.insert(0, settings['tg_token'])
                self.tg_chat_id_entry.insert(0, settings['tg_chat_id'])
                self.vk_group_id_entry.insert(0, settings['vk_group_id'])
                self.time_interval_scale.set(settings['interval'])
                self.num_posts_entry.insert(0, settings['num_posts'])
                self.skip_first_post_var.set(settings['skip_first_post'])
        except Exception as error:
            print(error)

    def run(self):
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–º–æ—â—å—é tkinter
        self.root = tk.Tk()
        self.root.title("VK2TG Poster")
        self.root.geometry("400x400")

        #–ø—ã—Ç–∞—é—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É
        try:
            try:
                base_path = sys._MEIPASS
            except Exception:
                base_path = os.path.abspath(".")
            self.root.wm_iconbitmap(os.path.join(base_path, "icon.ico"))
        except:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        # Label –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –í–ö
        vk_token_label = tk.Label(self.root, text="–¢–æ–∫–µ–Ω –í–ö")
        vk_token_label.pack(fill="both")
        self.vk_token_entry = tk.Entry(self.root)
        self.vk_token_entry.pack(fill="both", padx=3)

        # Label –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –¢–ì
        tg_token_label = tk.Label(self.root, text="–¢–æ–∫–µ–Ω –¢–ì")
        tg_token_label.pack(fill="both")
        self.tg_token_entry = tk.Entry(self.root)
        self.tg_token_entry.pack(fill="both", padx=3)

        # Label –¥–ª—è id –±–æ—Ç–∞ –¢–ì
        tg_chat_id_label = tk.Label(self.root, text="id –±–æ—Ç–∞ –¢–ì")
        tg_chat_id_label.pack(fill="both")
        self.tg_chat_id_entry = tk.Entry(self.root)
        self.tg_chat_id_entry.pack(fill="both", padx=3)

        # Label –¥–ª—è id –≥—Ä—É–ø–ø—ã –í–ö
        vk_group_id_label = tk.Label(self.root, text="id –≥—Ä—É–ø–ø—ã –í–ö")
        vk_group_id_label.pack(fill="both")
        self.vk_group_id_entry = tk.Entry(self.root)
        self.vk_group_id_entry.pack(fill="both", padx=3)

        # Scale –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
        time_interval_label = tk.Label(self.root, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)")
        time_interval_label.pack(fill="both")
        self.time_interval_scale = tk.Scale(self.root, from_=5, to=3600, orient="horizontal")
        self.time_interval_scale.pack(fill="both")

        # Entry –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
        num_posts_label = tk.Label(self.root, text="–°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\n–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –í–°–ï –ø–æ—Å—Ç—ã")
        num_posts_label.pack(fill="both")
        self.num_posts_entry = tk.Entry(self.root)
        self.num_posts_entry.pack(fill="both", padx=3)

        # Checkbox –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
        self.skip_first_post_var = tk.BooleanVar(value=True)
        self.skip_first_post_checkbox = tk.Checkbutton(self.root, text="–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç", variable=self.skip_first_post_var)
        self.skip_first_post_checkbox.pack(fill="both")


        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞
        self.start_button = tk.Button(self.root, text="–°–¢–ê–†–¢", bg="lightgreen", height=2, command=lambda: asyncio.run(self.start()))
        self.start_button.pack(fill="both", side="bottom", padx=3, pady=3)

        # –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        self.load_settings()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.root.mainloop()



# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
vk_to_tg = VKtoTelegram()
vk_to_tg.run()
